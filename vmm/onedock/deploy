#!/bin/bash
#
# ONEDock - Docker support for ONE (as VMs)
# Copyright (C) GRyCAP - I3M - UPV 
# Copyright 2015, Atos Spain SA.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../../onedock.sh
log_onedock_debug "$0 $@"
setup_wn

domain=$1
mkdir -p `dirname $domain`
cat > $domain

ONEDOCK_DEPLOYMENT_FILE=$(dirname $domain)/deployment.onedock
read_xpath "$(cat $domain)" "/VM/ID" "/VM/NAME" "/VM/TEMPLATE/DISK/IMAGE_ID" "/VM/TEMPLATE/MEMORY" "/VM/TEMPLATE/CPU"

unset i

VMID="${XPATH_ELEMENTS[i++]}"
NAME="${XPATH_ELEMENTS[i++]}"
IMAGEID="${XPATH_ELEMENTS[i++]}"
MEMORY="${XPATH_ELEMENTS[i++]}"
CPU="${XPATH_ELEMENTS[i++]}"
DN=$(readlink -e ${DRIVER_PATH}/../../docker-manage-network)

CREATEDEPFILE=yes
EXISTS=$(docker inspect -f '{{.State.Running}}' "$NAME" 2>/dev/null)
if [ "$EXISTS" == "false" ]; then
    CREATEDEPFILE=no
    data=`docker start "$NAME"`
elif [ "$EXISTS" == "true" ]; then
    CREATEDEPFILE=no
    data="already running"
else
    cat > $ONEDOCK_DEPLOYMENT_FILE << EOF
EOF
    # data=`docker run --net="none" -td --name $NAME $LOCAL_SERVER/$IMAGE_BASENAME:$IMAGEID /bin/bash 2>&1`
    ONEDOCK_DOCKERRUN=$(dirname $domain)/disk.0.dockerrun
    if [ -e "$ONEDOCK_DOCKERRUN" ]; then
	DOCKERRUNCMD="$(cat $ONEDOCK_DOCKERRUN)"
    elif [ "$ONEDOCK_DEFAULT_DOCKERRUN" != "" ]; then
	DOCKERRUNCMD="$ONEDOCK_DEFAULT_DOCKERRUN"
    else
	DOCKERRUNCMD=
    fi

    MEMORY_UNITY="M"
    if [ -z ${MEMORY:=512} ]; then
     data_memory="-m $MEMORY$MEMORY_UNITY";
    else
     data_memory="-m $MEMORY$MEMORY_UNITY";
    fi

    if [ -z ${CPU:=1} ]; then
     data_cpu="--cpu-shares=$CPU";
    else
     data_cpu="--cpu-shares=$CPU";
    fi
    data=`docker run $data_memory $data_cpu --net="none" -td --name $NAME $LOCAL_SERVER/$IMAGE_BASENAME:$IMAGEID $DOCKERRUNCMD 2>&1`
fi

if [ $? -eq 0 ]; then
    echo $NAME
    log_onedock_debug "$data"
    
    if [ "$CREATEDEPFILE" == "yes" ]; then
        DOM=$(cat "$domain")
        NICS="$(echo "$DOM" | xmlstarlet sel -t -m /VM/TEMPLATE/NIC -v "concat(NIC_ID,';',BRIDGE,';',IP,';',MAC)" -n)"
        for NIC in $NICS; do
            NIC_ID=
            BRIDGE=
            IP=
            MAC=
            IFS=';' read NIC_ID BRIDGE IP MAC <<< "$NIC"
    
            MAC_STR=
            IP_STR=
            BRIDGE_STR=
            GW_STR=
    
            NICNAME=eth${NIC_ID}
            NIC_STR="--create-device $NICNAME"
            [ "$BRIDGE" != "" ] && BRIDGE_STR="--bridge $BRIDGE"
            [ "$MAC" != "" ] && MAC_STR="--mac $MAC"
            if [ "$IP" != "" ]; then
                [ "$ONEDOCK_DEFAULT_NETMASK" != "" ] && IP=$IP/$ONEDOCK_DEFAULT_NETMASK
                IP_STR="--ip $IP"
            fi
            
            # Now we get the context for the network
            NICNAME=ETH${NIC_ID}
            NET_CONTEXT="$(echo "$DOM" | xmlstarlet sel -t -m /VM/TEMPLATE/CONTEXT -v "concat(${NICNAME}_IP,';',${NICNAME}_MAC,';',${NICNAME}_MASK,';',${NICNAME}_NETWORK,';',${NICNAME}_GATEWAY,';',${NICNAME}_DNS)")"
            IFS=';' read C_IP C_MAC C_MASK C_NET C_GW C_DNS <<< "$NET_CONTEXT"
    
            if [ "$C_IP" != "" ]; then
                IP_STR="--ip $C_IP"
                [ "$C_MASK" != "" ] && IP_STR="${IP_STR}/${C_MASK}"
            else
                # If there is no context for IP address, should we set the IP using DHCP?
                is_true "$ONEDOCK_DEFAULT_DHCP" && IP_STR="--dhcp"
            fi
            
            [ "$C_MAC" != "" ] && MAC_STR="--mac $C_MAC"
            [ "$C_GW" != "" ] && GW_STR="--gateway $C_GW"
            
            echo "$SUDO $DN --container-name $NAME $BRIDGE_STR $MAC_STR $IP_STR $NIC_STR $GW_STR" >> $ONEDOCK_DEPLOYMENT_FILE
        done
    fi
    
    NETCONTEXT="$(
        set -e
        $(cat $ONEDOCK_DEPLOYMENT_FILE)
    )"
    if [ $? -ne 0 ]; then
        docker rm $(docker stop "$NAME")
        error_message "network contextualization failed: $(echo $NETCONTEXT | tr -d '\n')"
        exit 1
    fi
    exit 0
else
    error_message "Could not create domain from $domain: $data"
    exit -1
fi
