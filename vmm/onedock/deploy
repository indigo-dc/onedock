#!/bin/bash
#
# ONEDock - Docker support for ONE (as VMs)
# Copyright (C) GRyCAP - I3M - UPV 
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../../onedock.sh
setup_wn
log_onedock_debug "$0 $@"
source ${DRIVER_PATH}/vmmfnc.sh

domain=$1
mkdir -p `dirname $domain`
cat > $domain
DOMXML=$(cat "$domain")
DATASTOREFOLDER=$(dirname $domain)

ONEDOCK_NETWORK_FILE=$(dirname $domain)/deployment.network
ONEDOCK_DEVICES_FILE=$(dirname $domain)/deployment.devices
read_xpath "$DOMXML" "/VM/ID" "/VM/NAME"

unset i

VMID="${XPATH_ELEMENTS[i++]}"
NAME="${XPATH_ELEMENTS[i++]}"
DN=$(readlink -e ${DRIVER_PATH}/../../docker-manage-network)
CONTAINERNAME=one-$VMID
DISKIMAGENAME=$(build_dock_name "$LOCAL_SERVER" "" "$CONTAINERNAME" "0")

EXISTS=$(docker inspect -f '{{.State.Running}}' "$CONTAINERNAME" 2>/dev/null)
if [ "$EXISTS" == "false" ] || [ "$EXISTS" == "true" ]; then
    error_message "name $CONTAINERNAME already taken"
    exit -1
fi

DEVICES_STR=$(setup_devices "$DOMXML" "$DATASTOREFOLDER" "$ONEDOCK_DEVICES_FILE")
if [ $? -ne 0 ]; then
    error_message "could not setup devices for deployment $domain"
    exit -1
fi

NETWORK_STR=$(setup_network "$DOMXML" "$DATASTOREFOLDER" "$ONEDOCK_NETWORK_FILE")
if [ $? -ne 0 ]; then
    error_message "could not setup network for deployment $domain"
    exit -1
fi

ONEDOCK_DOCKERRUN=$DATASTOREFOLDER/disk.0.dockerrun
if [ -e "$ONEDOCK_DOCKERRUN" ]; then
    DOCKERRUNCMD="$(cat $ONEDOCK_DOCKERRUN)"
elif [ "$ONEDOCK_DEFAULT_DOCKERRUN" != "" ]; then
    DOCKERRUNCMD="$ONEDOCK_DEFAULT_DOCKERRUN"
else
    DOCKERRUNCMD=
fi

ONEDOCK_DOCKERVOL=$DATASTOREFOLDER/disk.0.dockervol
if [ -e "$ONEDOCK_DOCKERVOL" ]; then
    DOCKERVOLCMD="$(cat $ONEDOCK_DOCKERVOL)"
else
    DOCKERVOLCMD=
fi

        
# docker run --net="none" --device /dev/nbd0:/dev/hdc --device /dev/nbd0p1:/dev/hdc1 --cap-add SYS_ADMIN --security-opt apparmor:unconfined -td --name one-3 onedockvol:5000/one-3:0 
log_onedock_debug "docker run $NETWORK_STR $DEVICES_STR -td --name $CONTAINERNAME $DOCKERVOLCMD $DISKIMAGENAME $DOCKERRUNCMD 2>&1"
data=$(sh -c "docker run $NETWORK_STR $DEVICES_STR -td --name $CONTAINERNAME $DOCKERVOLCMD $DISKIMAGENAME $DOCKERRUNCMD 2>&1")

if [ $? -eq 0 ]; then
    echo $CONTAINERNAME

    NETCONTEXT="$(
        set -e
        $(cat "$ONEDOCK_NETWORK_FILE")
    )"
    if [ $? -ne 0 ]; then
        docker rm $(docker stop "$CONTAINERNAME")
        cleanup_disks "$DOMXML" "$DATASTOREFOLDER" "$ONEDOCK_DEVICES_FILE"
        error_message "network contextualization failed: $(echo $NETCONTEXT | tr -d '\n')"
        exit 1
    fi

#setup vncterm
CONTAINERID="$(docker ps -a -q --filter=name=$CONTAINERNAME)"
VNC_STR=$(setup_vncterm "$DOMXML" "$CONTAINERNAME" "$CONTAINERID")
if [ $? -ne 0 ]; then
    error_message "could not setup vncterm for deployment $domain"
    exit 1
fi
    exit 0
else
    error_message "Could not create domain from $domain: $data"
    exit -1
fi
