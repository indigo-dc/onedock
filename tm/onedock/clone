#!/bin/bash
#
# ONEDock - Docker support for ONE (as VMs)
# Copyright (C) GRyCAP - I3M - UPV 
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../../onedock.sh
log_onedock_debug "$0 $@"
setup_frontend

# clone: clones the image from the datastore (non-persistent images)
# ARGUMENTS: fe:SOURCE host:remote_system_ds/disk.i vm_id ds_id
# fe is the front-end hostname
# SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
# host is the target host to deploy the VM
# remote_system_ds is the path for the system datastore in the host
# vm_id is the id of the VM
# ds_id is the target datastore (the system datastore)

SRC=$1
DST=$2
VMID=$3
DSID=$4

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DISK_ID=$(basename ${DST_PATH} | cut -d. -f2)

DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`

DISKIMAGENAME=$(build_dock_name "$LOCAL_SERVER" "" "one-$VMID" "$DISK_ID")

DOCKERRUN=
DOCKERVOL=
PROTOCOL=${SRC::9}
if [ "$PROTOCOL" == "docker://" ]; then
    read_xpath "$(onevm show -x $VMID)" "/VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID"
    IMGID=${XPATH_ELEMENTS[0]}
    read_xpath "$(oneimage show -x $IMGID)" "/IMAGE/TEMPLATE/DOCKERRUN"
    DOCKERRUN=${XPATH_ELEMENTS[0]}
    DOCKERRUN_B64=$(base64 <<< $DOCKERRUN)
    read_xpath "$(oneimage show -x $IMGID)" "/IMAGE/TEMPLATE/DOCKERVOL"
    DOCKERVOL=${XPATH_ELEMENTS[0]}


    DOCKER_IMG_NAME=${SRC:9}
    DOCKER_CMD="docker pull ${DOCKER_IMG_NAME}"
    ssh_exec_and_log "$DST_HOST" "$DOCKER_CMD" "Error getting image ${DOCKER_IMG_NAME}"
    log_onedock "image ${DOCKER_IMG_NAME} downloaded in $DST_HOST"
else
    log_onedock_debug "THIS PART OF CODE IS NOT FULLY TESTED"
    # it is a file and we will assume that it is in a shared folder (e.g. NFS)
    # the current support for this is to load the image in the local repository 
    SRC_PATH=`arg_path $SRC`
    
    IMAGENAME=$(get_imagename_from_file "$SRC_PATH")
    [ $? -ne 0 ] && log_error "$IMAGENAME" && exit 1
    split_dock_name "$IMAGENAME" SERVER USER IMAGE TAG
    DOCKER_IMG_NAME=$(build_dock_name "" "" "$IMAGE" "$TAG")

    log_onedock_debug "loading image $IMAGENAME from file"
    DOCKER_CMD="docker load -i $SRC_PATH"
    ssh_exec_and_log "$DST_HOST" "$DOCKER_CMD" "Error getting image ${DOCKER_IMG_NAME}"
fi

DOCKER_CMD="docker tag -f $DOCKER_IMG_NAME $DISKIMAGENAME"
ssh_exec_and_log "$DST_HOST" "$DOCKER_CMD" "Error tagging the image $DOCKER_IMG_NAME as $DISKIMAGENAME"
if [ "$DOCKERRUN" != "" ]; then
    ssh_make_path $DST_HOST $DST_DIR
    ssh_exec_and_log $DST_HOST "echo "$DOCKERRUN_B64" | base64 -d > ${DST_PATH}.dockerrun"
fi
if [ "$DOCKERVOL" != "" ]; then
    ssh_make_path $DST_HOST $DST_DIR
    ssh_exec_and_log $DST_HOST "echo '$DOCKERVOL' > ${DST_PATH}.dockervol"
fi

log_onedock_debug "image $DOCKER_IMG_NAME tagged as $DISKIMAGENAME"
DOCKER_CMD="docker rmi $DOCKER_IMG_NAME"
ssh_exec_and_log "$DST_HOST" "$DOCKER_CMD" "Error removing image $DOCKER_IMG_NAME"
exit 0
